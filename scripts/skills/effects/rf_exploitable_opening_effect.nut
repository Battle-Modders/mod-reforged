this.rf_exploitable_opening_effect <- ::inherit("scripts/skills/skill", {
	m = {
		HitChanceIncrease = 10,
		Opponents = []
	},
	function create()
	{
		this.m.ID = "effects.rf_exploitable_opening";
		this.m.Name = "Exploitable Opening";
		this.m.Description = "This character\'s stance has an opening which can be exploited by certain opponents.";
		this.m.Icon = "skills/rf_exploitable_opening_effect.png";
		this.m.IconMini = "rf_exploitable_opening_effect_mini";
		this.m.Type = ::Const.SkillType.StatusEffect;
		this.m.IsActive = false;
		this.m.IsStacking = false;
		this.m.IsRemovedAfterBattle = true;
	}

	function isHidden()
	{
		return this.m.Opponents.len() == 0;
	}

	function getOpponent(_entityID)
	{
		return ::Tactical.getEntityByID(_entityID);
	}

	function addOpponent(_entityID)
	{
		if (this.m.Opponents.find(_entityID) == null)
		{
			this.m.Opponents.push(_entityID);
		}
	}

	function removeOpponent(_entityID)
	{
		local idx = this.m.Opponents.find(_entityID);
		if (idx != null)
		{
			this.m.Opponents.remove(idx);
		}
	}

	function hasOpponent(_entityID)
	{
		return this.m.Opponents.find(_entityID) != null;
	}

	function getTooltip()
	{
		local tooltip = this.skill.getTooltip();

		if (this.m.Opponents.len() != 0)
		{
			tooltip.push(
				{
					id = 10,
					type = "text",
					icon = "ui/icons/melee_defense.png",
					text = "The following characters have [color=" + ::Const.UI.Color.NegativeValue + "]+" + this.m.HitChanceIncrease + "[/color] Melee Skill against this character:"
				}
			);
			foreach (opponentID in this.m.Opponents)
			{
				local enemy = this.getOpponent(opponentID);
				if (enemy == null) continue;

				tooltip.push(
					{
						id = 10,
						type = "text",
						icon = "ui/orientation/" + enemy.getOverlayImage() + ".png",
						text = enemy.getName()
					}
				);
			}
		}

		return tooltip;
	}

	function onTurnStart()
	{
		foreach (opponentID in this.m.Opponents)
		{
			local enemy = this.getOpponent(opponentID);
			if (enemy != null)
			{
				local perk = enemy.getSkills().getSkillByID("perk.rf_exploit_opening");
				if (perk != null) perk.removeOpponent(this.getContainer().getActor().getID());
			}
		}

		this.removeSelf();
	}

	function onDeath( _fatalityType )
	{
		foreach (opponentID in this.m.Opponents)
		{
			local enemy = this.getOpponent(opponentID);
			if (enemy != null)
			{
				local perk = enemy.getSkills().getSkillByID("perk.rf_exploit_opening");
				if (perk != null) perk.removeOpponent(this.getContainer().getActor().getID());
			}
		}
	}

	function onTurnEnd()
	{
		if (this.m.Opponents.len() == 0)
		{
			this.removeSelf();
		}
	}
});
