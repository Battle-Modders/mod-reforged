this.perk_rf_exploit_opening <- ::inherit("scripts/skills/skill", {
	m = {
		HitChanceIncrease = 10,
		Opponents = []
	},
	function create()
	{
		this.m.ID = "perk.rf_exploit_opening";
		this.m.Name = ::Const.Strings.PerkName.RF_ExploitOpening;
		this.m.Description = "This character is ready to exploit an opening in an attacker\'s stance who has missed an attack against this character.";
		this.m.Icon = "ui/perks/rf_exploit_opening.png";
		this.m.IconMini = "rf_exploit_opening_mini";
		this.m.Type = ::Const.SkillType.Perk | ::Const.SkillType.StatusEffect;
		this.m.Order = ::Const.SkillOrder.Perk;
		this.m.IsActive = false;
		this.m.IsStacking = false;
		this.m.IsHidden = false;
	}

	function isHidden()
	{
		return this.m.Opponents.len() == 0;
	}

	function onCombatFinished()
	{
		this.skill.onCombatFinished();
		this.m.Opponents.clear();
	}

	function addOpponent( _entity )
	{
		if (this.m.Opponents.find(_entity.getID()) == null)
			this.m.Opponents.push(_entity.getID());
	}

	function hasOpponent( _entity )
	{
		return this.m.Opponents.find(_entity.getID()) != null;
	}

	function removeOpponent( _entity )
	{
		::MSU.Array.removeByValue(this.m.Opponents, _entity.getID());
	}

	function getTooltip()
	{
		local tooltip = this.skill.getTooltip();

		tooltip.push({
			id = 10,
			type = "text",
			icon = "ui/icons/melee_defense.png",
			text = "[color=" + ::Const.UI.Color.NegativeValue + "]+" + this.m.HitChanceIncrease + "[/color] Melee Skill or ignore shield defense when attacking:"
		});

		foreach (opponentID in this.m.Opponents)
		{
			local enemy = ::Tactical.getEntityByID(opponentID)
			if (enemy == null) continue;

			tooltip.push({
				id = 10,
				type = "text",
				icon = "ui/orientation/" + enemy.getOverlayImage() + ".png",
				text = enemy.getName()
			});
		}

		return tooltip;
	}

	function onMissed( _attacker, _skill )
	{
		if (this.getContainer().getActor().getMoraleState() != ::Const.MoraleState.Fleeing && _skill.isAttack() && !_skill.isRanged() && _attacker != null && !_attacker.isAlliedWith(this.getContainer().getActor()))
		{
			this.addOpponent(_attacker);
		}
	}

	function onAnySkillUsed( _skill, _targetEntity, _properties )
	{
		if (_targetEntity != null && this.hasOpponent(_targetEntity))
		{
			_properties.MeleeSkill += this.getHitChanceBonus(_skill, _targetEntity);
		}
	}

	function onTurnEnd()
	{
		this.m.Opponents.clear();
	}

	function onGetHitFactors( _skill, _targetTile, _tooltip )
	{
		local targetEntity = _targetTile.getEntity();
		if (targetEntity != null && this.hasOpponent(targetEntity))
		{
			_tooltip.push({
				icon = "ui/tooltips/positive.png",
				text = ::MSU.Text.colorPositive(this.getHitChanceBonus(_skill, targetEntity) + "% ") + this.getName()
			});
		}
	}

	function getHitChanceBonus( _skill, _targetEntity )
	{
		// Skills that ignore shields by default (i.e. IsShieldRelevant = false) only get the default bonus
		// other skills get the maximum of the two between shield defense and default bonus
		if (!_skill.m.IsShieldRelevant)
			return this.m.HitChanceIncrease;

		local shieldDefense = _targetEntity.isArmedWithShield() ? _targetEntity.getOffhandItem().getMeleeDefenseBonus() : 0;
		return ::Math.max(this.m.HitChanceIncrease, shieldDefense);
	}
});
